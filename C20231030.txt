**아침과제**
2차원 배열에 주어진 정보를 입력하고
1111111111
1000100001
1000100001
1000100001
1111111111
1000100001
1000100001
1000100001
아래와 같이 바꿔주는 프로그램을 만들어 보세요.github로 내놔~~~~
0000000000
0111011110
0111011110
0111011110
0000000000
0111011110
0111011110
0111011110
0000000000

반복문 숫자 바꿔주고 

***********************************
둠은 cpu랑 메모리만 있으면
어디서든 돌아감(c++로 다돌아감)
***********************************

안보고 만들수있으면 어디든 갈 수 있음

*********************************************************
//char Message[6] = { 'H','e','l','l','o','\0' };
char Message[6] = "Hello";
문자 끝에 널을 써줘야함 
#include <iostream>
#include <string>

using namespace std;

int main()
{
	//char Message[6] = { 'H','e','l','l','o','\0' };
	string Message = "He\0llo";

	cout << Message << endl;
	return 0;
}
==>>>> 출력하면 He만 나옴 \0(널0)은 문자의 끝이라고
컴퓨터에게 입력 

*********************************************************
// new delete
//new[] delete[] 항상 뒤에 델레트 붙이는 습관이 필요

cout << *(Number+i) = i * 3; 
              Number[i] = i * 3; 
*(Number+i) = Number[i] 같은 표현으로 쓸 수 있음
*Number+1 ==> 넘버의 첫번째 값을 불러와 

***기본개념이 머리에 박혀있어야 쓰기 편하다*****
***************
#include <iostream>
using namespace std;

class UTexture
{

};
int main()
{
	int N = 10;
	//vector // link list 장점은 저장 지우기가 용이하다 
                          단점은 탐색이 느리다(자료구조)
	
	UTexture* Texuture = new UTexture[100];
            // 클래스가 지정되어있어야함
	delete[] Texuture;

	return 0;
}
********************************************


int, char는 메모리(byte)를 내가 정하고 쓸거야라고 하면(정적인=정해져있는)
==>> 속도가 일정하다
*(Poiter) 는 메모리(byte)가 제한되어 있지가 않음(동적인=정해져있지않은)
==>> 속도가 느리다
프로그램 한다는건 동적으로 만든걸 제어하고 통제하고 지운다
스스로 만들어보고 지워봐라
*(포인터)는 주소를 정하는 것이고 &(앤퍼서드)는 주소를 불러온다고
생각하면 정의하기 쉬움
*****************************
managed language (메모리를 관리_)    java(메모리),  c#(컴퓨터)  ,python
unmanaged language (메모리를 노관리_) {c , cpp(c++)}메모리
int(float,int)* P ==>> Pointer 변수
int A = 10;
int* P = &A; (메모리 번지(위치)로 A값을 저장한다)
포인터를 만들어서(주소) 공유해서 사용하거나 임의로 내가 쓰고 싶을때 만듬

//int* P에 A값을 저장하라

cout << *P << endl; 
// *P에 저장된 것을 출력하라
float A = 100;
float* B = &A;

cout << *B << endl;
// 출력 100으로 나옴// 개념은 *를 써서 불러온다 
*()메모리 주소에 저장된 값을 불러온다
************************************************
#include <iostream>
using namespace std;
int main()
{
	int Size = 11;// 원하는 숫자를 조정

	// int Number[100]
	// 0 X 100
	int* Number = new int[Size];
	for (int i = 0; i < Size; ++i)
	{
		//*(Number + i) = i * 3;// 0X100+1
		Number[i] = i * 3; 
	}

	for (int i = 0; i < Size; ++i)
	{
		cout << *(Number + i) << endl;
	}

	delete[] Number;

	return 0;
}
**************************************************
#include <iostream>
using namespace std;
int main()
{
	//dynamic(동적인)
	float* pF= new float;//내가 잡았으니 내가 풀어줘야 됨

	*pF = 10.3f;

	cout << *pF << endl;

	delete pF;

	return 0;
}

======>>>>> 오후 공부 밑에서도 있음
//////////////////////////////////////////////////////
************************************

****** 용어 정리 계속 정의 또 정의****************
new : 내가 사용할 메모리를 정의
///
float* pF= new float;//내가 잡았으니 내가 풀어줘야 됨

delete pF;// 만들어진 pF를 지울때 사용 

///
Scene Graph ==>>> 
화분이 있으면 그 안에 나무가 있고 나무 안에
나무 안에 잎이 있고 잎 안에 색소가 있고 그런식의 그래프

cout << sizeof(A) << endl; 가로안에 있는 것의 저장 byte를 알수있음
&A = &[?] A를 찾아라 앰퍼샌드라고 부름 앰퍼샌드?
임의에 메모리가 할당되어 있어서 정해진 값은 아니다.
nullptr :메모리는 쓰고 있지만 값이 없다(빈방)
int* : 자료형 
상수 : 문자,숫자
변수 :
bool : true, false
int : 정수형 숫자 , 1, 0, -1
float : 실수, 소수점 포함함 숫자
char : 문자 , literal, 숫자 0 - 255 -> ASCII(아스킥코드) 
= : 대입연산자
int Number = 0;
float RealNumber = 0.0f;
char C = 'A';
bool bResult = true;

////////////////////////////
int Number[10] = {0, };
[][][][][][][][][][]
0123456789
반복문 //for 새로운 문법, while , function 
////////////////////////////

//////////////////////////////
분기문 (제어문) // if (true, false)
for(int i = 0; i < Numbersize(예:0~ 100000중에 아무숫자); ++i)
{
       Numbers[i];
}
int Number[2][10] = {0. };
[][][][][][][][][][]
[][][][][][][][][][]
	

반복되는 작업물을 편하게 하기위한게 for 1,2,3,4, 
순서대로 가는거면 치환가능   ====>>>  오전 공부
///////////////////////////////
****나의 결과물************
#include <iostream>

using namespace std;

int main()
{
	// 일단 맵을 만든다
	int PlayerX = "1";
	char PlayerY = "0";
	int Map[9][10] =
	{
	{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
	};
	// 맵을 출력한다
	for (int i = 0; i < 9; ++i)
	{
		for (int j = 0; j < 10; ++j)
		{
			cout << Map[i][j];
		}
		cout << endl;
	}
	// 0,1을 캐릭터로 정리하고 바꿔본다
	
	int Sum = 0;
		for (int i = 0; i < 9; ++i)
		{
			for (int j = 0; j < 10; ++j)
			{
				if (Map[i][j] == 0)
				{
					Map[i][j] = 1;
				}
				else if (Map[i][j] == 1)
				{
					Map[i][j] = 0;
				}
			}
			cout << endl;
		}

	return 0;
}
*********************************
**********선생님 결과물********

#include <iostream>

using namespace std;

int Numbers[9][10] = {
	{1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,1,0,0,0,0,1},
	{1,0,0,0,1,0,0,0,0,1},
	{1,0,0,0,1,0,0,0,0,1},
	{1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,1,0,0,0,0,1},
	{1,0,0,0,1,0,0,0,0,1},
	{1,0,0,0,1,0,0,0,0,1},
	{1,1,1,1,1,1,1,1,1,1}
};

void Print()
{
	for (int j = 0; j < 9; ++j)
	{
		for (int i = 0; i < 10; ++i)
		{
			cout << Numbers[j][i] << " ";
		}
		cout << endl;
	}
}

void ChangeNumber()
{
	for (int j = 0; j < 9; ++j)
	{
		for (int i = 0; i < 10; ++i)
		{
			Numbers[j][i] = (Numbers[j][i] == 0) ? 1 : 0;
			//if (Numbers[j][i] == 0)
			//{
			//	Numbers[j][i] = 1;
			//}
			//else if (Numbers[j][i] == 1)
			//{
			//	Numbers[j][i] = 0;
			//}
		}
	}
}

int main()
{
	Print();
	ChangeNumber();
	Print();

	return 0;
}

****************************************
#include <iostream>

using namespace std;


void Print
int main()
{
	// 일단 맵을 만든다
	int Map[9][10] =
	{
	{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '0', '0', '0', '1', '0', '0', '0', '0' ,'1'},
	{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
	};
	// 맵을 출력한다
	for (int i = 0; i < 9; ++i)
	{
		for (int j = 0; j < 10; ++j)
		{
			cout << Map[i][j] << " ";
		}
		cout << endl;
	}
	// 0,1을 캐릭터로 정리하고 바꿔본다

	for (int i = 0; i < 9; ++i)
	{
		for (int j = 0; j < 10; ++j)
		{
			if (Map[i][j] == 0)
			{
				Map[i][j] = 1;
			}
			else if (Map[i][j] == 1)
			{
				Map[i][j] = 0;
			}
		}
		cout << endl;
	}

	return 0;
}
***************************
***************************
A, B, C 값에 상관없이 Add 값을 5로 반환하라고 했기때문에
출력은 5로 나온다


#include <iostream>

using namespace std;

int Add()
{
	int A = 0;
	int B = 0;
	int C = A + B;

	cout << &A << endl;

	return 5;
}// 출력 이상한 숫자 나옴

int main()
{
	// 2+3 ==> 5
	cout << Add() << endl;

	return 0;
}// 출력 5가 나옴

****************************************
#include <iostream>

using namespace std;

/* int Add(int A, int B)
{
	//int A = 0;
	//int B = 0;
	int C = A + B;

	cout << A << endl;

	return 5;
}
*/
int A = 2;
int B = 3;

void Swap(int A, int B)
{
	int Temp = A;
	A = B;
	B = Temp;
}

int main()
{
	Swap();
	cout << A << endl;
	cout << B << endl;

	return 0;
}
********************************
int A = 10;
int* P = &A; (메모리 번지(위치)로 저장한다)

//int* P에 A값을 저장하라

cout << *P << endl; 
// *P에 저장된 것을 출력하라
********************************
((((((((((((((  예시   ))))))))))))))))))))))
#include <iostream>

using namespace std;




int main()
{
	int A = 10;
	int* P = &A;

	cout << &A << endl;
	cout << P << endl;

	cout << sizeof(A) << endl;
	cout << sizeof(P) << endl;

	cout << *P << endl;

	return 0;
}

===> 4, 8, 10 출력됨 A가 4byte, B가 8byte, *P=A이므로 10이 나옴 


************************************************
#include <iostream>

using namespace std;

int Change(int* PA)
{
	//*(PA + 1) = *PA + 3;
	PA[1] = PA[0] + 3;

	return 0;
}

int main()
{
	int Map[10] = { 0, };
	int A = 100;
	int* PA = &A;

	/////void* PV = &A;
                ///// 임의의 함수도 정할수있음
	cout << PA << endl;
	cout << PA + 1 << endl;
	//Change(&Map[0]);

	//cout << Map[0] << endl;
	//cout << Map[1] << endl;

	return 0;
}

*(PA + 1) =P[1], *PA + 3 = PA[0] + 3 
A값을 체인지 값에 대입한다 ==> 체인지에서 값은 3
메인가서 A값을 호출하라고 하면 3으로 바뀌어서 나온다

*******************************************************
#include <iostream>

using namespace std;

int main()
{
	
	int* PA = new int[1000];
	
	for (int i = 0; i < 1000; i++)
	{
		PA[i] = 0;
	}


	//memset(PA, 0, 1000);

	*PA = 1;
	*(PA + 1) = 2;
	PA[2] = 3;
	PA[3] = 4;

	delete[] PA;

	cout << new int[10] << endl;

	return 0;
}
******************************************
*최종적으로 우리가 할 것
******************************************
#include <iostream>
#include <string>

using namespace std;

int main()
{
	Engine* MyEngine = new Engine();
	MyEngine->Run()

	delete MyEngine
	return 0;
}
*******************************************



